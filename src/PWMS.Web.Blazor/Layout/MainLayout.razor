@using PWMS.Web.Blazor.Services.Core
@using System.Security.Claims
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject ISiteService SiteService

@inherits LayoutComponentBase
<MudLayout Style="display: flex;flex-flow: column;">
    <AuthorizeView>
        <Authorized>
            <MudAppBar Color="Color.Primary">
                @if (_warehouseAndSiteSet)
                {
                    <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="ToggleDrawer" />
                }
                <MudButton Color="Color.Inherit"
                           Variant="Variant.Text"
                           DropShadow="true"
                           OnClick="@(()=>NavigationManager.NavigateTo("/"))">
                    PWMS
                </MudButton>
                <MudSpacer />
                @if (_warehouseAndSiteSet)
                {
                    <MudButton Color="Color.Inherit"
                               Variant="Variant.Text"
                               DropShadow="true"
                               Class="rounded-r-0"
                               Size="Size.Small"
                               OnClick="@(() => NavigationManager.NavigateTo("/site"))">
                        @context.User.Claims.FirstOrDefault(c => c.Type == "SiteName")?.Value
                    </MudButton>
                    <MudButton Color="Color.Inherit"
                               Variant="Variant.Text"
                               Class="border-l border-solid rounded-l-0 mr-8"
                               Style="border-color: var(--mud-palette-primary-lighten)"
                               DropShadow="true"
                               Size="Size.Small"
                               OnClick="@(() => NavigationManager.NavigateTo("/warehouse"))">
                        @context.User.Claims.FirstOrDefault(c => c.Type == "WarehouseName")?.Value
                    </MudButton>
                }
                <MudMenu Label="@context.User.Claims.FirstOrDefault(c => c.Type == ClaimTypes.Name)?.Value"
                         EndIcon="@Icons.Material.Filled.KeyboardArrowDown"
                         Variant="Variant.Text"
                         Color="Color.Inherit"
                         AnchorOrigin="Origin.BottomCenter">
                    <MudMenuItem>Change Password</MudMenuItem>
                    <MudMenuItem OnClick="Logout">Logout</MudMenuItem>
                </MudMenu>
            </MudAppBar>
            @if (_warehouseAndSiteSet)
            {
                <MudDrawer @bind-Open="@_open" Elevation="1" Variant="@DrawerVariant.Responsive" ClipMode="DrawerClipMode.Docked">
                    <NavMenu />
                </MudDrawer>
            }
            <MudMainContent>
                @Body
            </MudMainContent>
        </Authorized>
        <NotAuthorized>
            <MudMainContent Class="px-4">
                @Body
            </MudMainContent>
        </NotAuthorized>
    </AuthorizeView>
</MudLayout>

<MudThemeProvider />
<MudDialogProvider />
<MudSnackbarProvider />
<MudPopoverProvider />

@code {
    public bool _warehouseAndSiteSet = false;
    private bool _open = false;

    protected override void OnAfterRender(bool firstRender)
    {
        base.OnAfterRender(firstRender);
    }

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();

        if (authState.User.Identity!.IsAuthenticated)
        {
            if (!string.IsNullOrEmpty(authState.User.Claims.FirstOrDefault(c => c.Type == "WarehouseId")?.Value) &&
            !string.IsNullOrEmpty(authState.User.Claims.FirstOrDefault(c => c.Type == "SiteId")?.Value))
                _warehouseAndSiteSet = true;
        }
        StateHasChanged();
    }


    private void ToggleDrawer()
    {
        _open = !_open;
    }

    private void Logout()
    {
        NavigationManager.NavigateTo("/logout", true);
    }
}