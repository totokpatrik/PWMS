@inject NavigationManager NavigationManager

<MudNavMenu>
    <MudTextField T="string" Label="Search" Adornment="Adornment.Start" TextChanged="OnTextChanged"
                  AdornmentIcon="@Icons.Material.Filled.Search" Immediate="true" Clearable="true" Class="m-2" />
    <MudTreeView Items="@TreeItems" ExpandOnClick="true">
        <ItemTemplate>
            @{
                var customNavMenuItem = context.Value; // for convenient usage in the template
            }
            <MudTreeViewItem @bind-Expanded="@context.Expanded" Items="@context.Children" Value="@context.Value"
                             Icon="@customNavMenuItem?.Icon" Text="@customNavMenuItem?.Name" Visible="@context.Visible" OnClick="@(() => Navigate(customNavMenuItem))" />
        </ItemTemplate>
    </MudTreeView>
</MudNavMenu>

@code {
    private List<TreeItemData<CustomNavMenuItem>> TreeItems { get; set; } = new();

    public class CustomNavMenuItem : IEquatable<CustomNavMenuItem>
    {
        public string Name { get; init; } = string.Empty;
        public string? Icon { get; set; }
        public string? NavigationUrl { get; set; }

        public CustomNavMenuItem(string name, string? icon, string? navigationUrl)
        {
            Name = name;
            Icon = icon;
            NavigationUrl = navigationUrl;
        }

        public bool Equals(CustomNavMenuItem other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;
            return Name == other.Name;
        }

        public override bool Equals(object obj) => ReferenceEquals(this, obj) || obj is CustomNavMenuItem other && Equals(other);

        public override int GetHashCode() => Name?.GetHashCode() ?? 0;
    }

    protected override void OnInitialized()
    {
        TreeItems.Add(new TreeItemData<CustomNavMenuItem>
            {
                Value = new CustomNavMenuItem("Configuration", null, null),
                Expanded = true,
                Children = [
                        new TreeItemData<CustomNavMenuItem> {
                        Value = new CustomNavMenuItem("Inventory", null, null),
                        Children = [
                            new TreeItemData<CustomNavMenuItem> {
                                Value = new CustomNavMenuItem("Item", null, null),
                                Children = [
                                    new TreeItemData<CustomNavMenuItem> {
                                        Value = new CustomNavMenuItem("Item Family Groups", null, "/configuration/inventory/item/itemFamilyGroup")
                                    },
                                    new TreeItemData<CustomNavMenuItem> {
                                        Value = new CustomNavMenuItem("Item Families", null, "/configuration/inventory/item/itemFamily")
                                    },
                                    new TreeItemData<CustomNavMenuItem> {
                                        Value = new CustomNavMenuItem("Footprints", null, "/configuration/inventory/item/footprint")
                                    },
                                    new TreeItemData<CustomNavMenuItem> {
                                        Value = new CustomNavMenuItem("Items", null, "/configuration/inventory/item/item")
                                    }
                                ]
                            }
                        ]
                    }
                    ]
            });

        TreeItems.Add(new TreeItemData<CustomNavMenuItem>
            {
                Value = new CustomNavMenuItem("Inventories", null, null)
            });
    }

    private void OnTextChanged(string searchTerm) => Filter(TreeItems, searchTerm);

    private void Filter(IEnumerable<TreeItemData<CustomNavMenuItem>> treeItemData, string text)
    {
        foreach (TreeItemData<CustomNavMenuItem> itemData in treeItemData)
        {
            if (itemData.HasChildren)
            {
                Filter(itemData.Children, text);
            }

            itemData.Visible = IsVisible(itemData, text);

            if (itemData.Visible)
                itemData.Expanded = true;
        }
    }

    private bool IsVisible(TreeItemData<CustomNavMenuItem> treeItemData, string searchTerm)
    {
        if (!treeItemData.HasChildren)
        {
            return treeItemData.Value.Name.Contains(searchTerm, StringComparison.OrdinalIgnoreCase);
        }

        return treeItemData.Children.Any(i => i.Visible);
    }

    private void Navigate(CustomNavMenuItem? customNavMenuItem)
    {
        if (!string.IsNullOrEmpty(customNavMenuItem?.NavigationUrl))
        {
            NavigationManager.NavigateTo(customNavMenuItem.NavigationUrl);
        }
    }
}